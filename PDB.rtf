{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\froman\fcharset0 Times-Roman;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;\red25\green28\blue31;\red244\green244\blue244;
\red123\green71\blue5;\red193\green71\blue5;\red0\green0\blue196;\red89\green98\blue106;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;\cssrgb\c12941\c14510\c16078;\cssrgb\c96471\c96471\c96471;
\cssrgb\c56078\c34902\c784;\cssrgb\c80784\c36078\c0;\cssrgb\c0\c0\c81176;\cssrgb\c42353\c45882\c49020;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 \ul \ulc0 Debugging Lecture:\
	notes from {\field{\*\fldinst{HYPERLINK "https://realpython.com/python-debugging-pdb/"}}{\fldrslt 
\f1\b0 \cf2 \expnd0\expndtw0\kerning0
\ulc2 \outl0\strokewidth0 \strokec2 https://realpython.com/python-debugging-pdb/}}\

\f2\b0 \ulnone \
Use of breakpoint instead of set_trace -> imports pdb and sets_trace,  but use of API can increase control of behavior (e.g setting PYTHONBREAKPOINT = 0 turns off debugging)\
\
Can also call it from command line on a script without it \
	
\f3\fs28\fsmilli14400 \cf3 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 python3 -m pdb app.py arg1 arg2
\f2\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0  \
	Less relevant with notebooks? -> well, scripts can be run autonomously on regular intervals\
Go through example of what it looks like in a cell\
	
\f3\fs28\fsmilli14400 \cf5 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 $\cf3 \strokec3  ./example1.py \
\pard\pardeftab720\sl432\partightenfactor0
\cf5 \strokec5 >\cf3 \strokec3  /code/example1.py\cf6 \strokec6 (\cf7 \strokec7 5\cf6 \strokec6 )\cf3 \strokec3 <module>\cf6 \strokec6 ()\cf3 \strokec3 \
\cf8 \strokec8 -> print(f'path = \{filename\}')\cf3 \strokec3 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 What does each part of the second line mean? Script run, line number, method you\'92re in\
\
Go through examples of useful commands:\
	ll for full context, l for immediate context\
	p to print, emphasize that any valid expression can be run\
	pp to print, useful for lists or dictionaries\
	difference between n (next) and s (step):\
		next runs until it hits the next line or something is returned \
			(next line)\
		step runs until the next moment it can pause (I.e either in another function that is called 			or the current function)\
			(step into)\
		tells you why it stopped and prints any return (press enter to repeat last command)\
	c continues until a breakpoint is found\
Can also set condition on breaking :\
	
\f3\fs28\fsmilli14400 \cf8 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 b(reak) [ ([filename:]lineno | function) [, condition] ]\cf3 \strokec3 \

\f2\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 	b (break) just lists all of the breakpoints\
		these can be enabled and disabled calling the number disable 1, enable 2, etc\
	cl (clear) deletes a breakpoint\
	a (arguments) prints argument list of current function\
	tbreak creates temporary breakpoint deleted after first being hit (good for exploratory 		debugging) \
	display to print out value of expression only if it changes when it pauses again\
		used for tracking a single or even multiple expressions\
Example: involving regex in a list, want to break when something that is not in the correct format is passed\
\
More complicated example:\
	w (where) to print the current stack trace (how and where the current line has been called)\
	why is this useful? -> u (up) and d (down) to navigate the stack to inspect different variable scopes\
\

\f0\b \ul Notes from FangFang:\

\f2\b0 \ulnone \
Liked activation at the beginning\
Go through concept of breakpoint slower and more in depth\
Cover/review idea of code stack and how breakpoint/next/step fits into it\
Go through a more straightforward code example of a for loop before contrived example\
Move broken code up sooner to hit the error sooner\
\

\f0\b \ul Notes from Vishal:
\f2\b0 \ulnone \
\
Go further into stack trace\
Add emphasis on continue and stepping, add stepping example to for loop\
Emphasize professional need for debugging (can\'92t just add print statements everywhere)\
\
		}